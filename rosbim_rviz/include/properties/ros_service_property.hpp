/**
 * \file ros_service_property.hpp
 * \mainpage
 *   Property of a ROS service to be used in an Rviz panel
 *   Based on https://github.com/ros-visualization/rviz/blob/noetic-devel/src/rviz/properties/ros_topic_property.h
 * 
*/

#ifndef ROSBIM_RVIZ_ROS_SERVICE_PROPERTY
#define ROSBIM_RVIZ_ROS_SERVICE_PROPERTY

#include <QObject>
#include <QString>
#include <rviz_common/config.hpp>
#include <rviz_common/properties/editable_enum_property.hpp>
#include <string>

namespace rosbim_rviz
{

/**\class RosServiceProperty
   * \brief 
   *   RViz property for understanding how many services of a particular type are 
   *   currently exposed
  */
class RVIZ_COMMON_PUBLIC RosServiceProperty : public rviz_common::properties::EditableEnumProperty
{
  Q_OBJECT

public:
  /**\fn RosServiceProperty
       * \brief
       *   Constructor for ROS service property
       *   See also http://docs.ros.org/en/noetic/api/rviz/html/c++/classrviz_1_1Property.html#ac455e1f6cdc2850394d16d43006d8319
       *
       * \param[in] name
       *   The name of the property displayed in RViz
       * \param[in] default_value
       *   The default value of the property if the property is spawned
       * \param[in] service_type
       *   The name of the ROS service, e.g. ros::service_traits::datatype<package::Service>()
       * \param[in] description
       *   The description to be displayed inside RViz
       * \param[in] parent
       *   The parent display that the property is spawned in
       * \param[in] changed_slot
       *   The function to be called when the value changes generated by the Qt slot macro, e.g. SLOT(func())
       * \param[in] receiver
       *   If receiver is non-NULL, the changed() signal is connected to the changed_slot on the receiver object
      */
  RosServiceProperty(
    QString const & name = QString(), QString const & default_value = QString(),
    QString const & service_type = QString(), QString const & description = QString(),
    rviz_common::properties::Property * parent = nullptr, char const * changed_slot = nullptr,
    QObject * receiver = nullptr);

  /**\fn setServiceType
       * \brief
       *   Setter for the service type
       *
       * \param[in] service_type
       *   The service type that the internal variable of the service property should be set to
      */
  void setServiceType(QString const & service_type)
  {
    service_type_ = service_type;
    return;
  }

  /**\fn getServiceType
       * \brief
       *   Getter for the stored service type
       *
       * \return
       *   The service type that the property is currently set to
      */
  QString getServiceType() const { return service_type_; }

  /**\fn getService
       * \brief
       *   Get the currently selected service
       *
       * \return
       *   The name of the currently selected service
      */
  QString getService() const { return getValue().toString(); }

  /**\fn getServiceStd
       * \brief
       *   Get the currently selected service as an std::string
       *   RViz properties use this rather weird naming convention
       *
       * \return
       *   The name of the currently selected service
      */
  std::string getServiceStd() const { return getValue().toString().toStdString(); }

protected Q_SLOTS:
  /**\fn fillServiceList
       * \brief
       *   Determine all the currently available services of this type and update
       *   the possible options of the property that a user can select from
      */
  virtual void fillServiceList();

private:
  QString service_type_;
};

}  // namespace rosbim_rviz

#endif  // ROSBIM_RVIZ_ROS_SERVICE_PROPERTY
